import struct
import binascii
import sys
from .ProtobufException import ProtobufException


class SmallProtobufHelper:
    def _write_varint(self, num):
        data = b''
        while num != 0:
            t = num & 0x7F
            num >>= 7
            if num != 0:
                data += struct.pack('B', t | 0x80)
            else:
                data += struct.pack('B', t)
        return data

    def get_query_message(self, str24=None):
        if str24 is not None:
            resstr = b'\x10\x00\x1a\x2a\x31\x2d\x64\x61\x33\x39\x61\x33\x65\x65\x35\x65\x36\x62\x34\x62\x30\x64\x33' \
                     b'\x32\x35\x35\x62\x66\x65\x66\x39\x35\x36\x30\x31\x38\x39\x30\x61\x66\x64\x38\x30\x37\x30\x39' \
                     b'\x22\xe3\x01\x0a\xbf\x01\x0a\x45\x67\x65\x6e\x65\x72\x69\x63\x5f\x78\x38\x36\x2f\x67\x6f\x6f' \
                     b'\x67\x6c\x65\x5f\x73\x64\x6b\x5f\x78\x38\x36\x2f\x67\x65\x6e\x65\x72\x69\x63\x5f\x78\x38\x36' \
                     b'\x3a\x34\x2e\x34\x2e\x32\x2f\x4b\x4b\x2f\x33\x30\x37\x39\x31\x38\x33\x3a\x65\x6e\x67\x2f\x74' \
                     b'\x65\x73\x74\x2d\x6b\x65\x79\x73\x12\x06\x72\x61\x6e\x63\x68\x75\x1a\x0b\x67\x65\x6e\x65\x72' \
                     b'\x69\x63\x5f\x78\x38\x36\x2a\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x32\x0e\x61\x6e\x64\x72\x6f\x69' \
                     b'\x64\x2d\x67\x6f\x6f\x67\x6c\x65\x40\x85\xb5\x86\x06\x4a\x0b\x67\x65\x6e\x65\x72\x69\x63\x5f' \
                     b'\x78\x38\x36\x50\x13\x5a\x19\x41\x6e\x64\x72\x6f\x69\x64\x20\x53\x44\x4b\x20\x62\x75\x69\x6c' \
                     b'\x74\x20\x66\x6f\x72\x20\x78\x38\x36\x62\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x6a\x0e\x67\x6f\x6f' \
                     b'\x67\x6c\x65\x5f\x73\x64\x6b\x5f\x78\x38\x36\x70\x00\x10\x00\x32\x06\x33\x31\x30\x32\x36\x30' \
                     b'\x3a\x06\x33\x31\x30\x32\x36\x30\x42\x0b\x6d\x6f\x62\x69\x6c\x65\x3a\x4c\x54\x45\x3a\x48\x00' \
                     b'\x32\x05\x65\x6e\x5f\x55\x53\x38\xf0\xb4\xdf\xa6\xb9\x9a\xb8\x83\x8e\x01\x52\x0f\x33\x35\x38' \
                     b'\x32\x34\x30\x30\x35\x31\x31\x31\x31\x31\x31\x30\x5a\x00\x62\x10\x41\x6d\x65\x72\x69\x63\x61' \
                     b'\x2f\x4e\x65\x77\x5f\x59\x6f\x72\x6b\x70\x03\x7a\x1c\x37\x31\x51\x36\x52\x6e\x32\x44\x44\x5a' \
                     b'\x6c\x31\x7a\x50\x44\x56\x61\x61\x65\x45\x48\x49\x74\x64\x2b\x59\x67\x3d\xa0\x01\x00\xb0\x01' \
                     b'\x00\xc2\x01' + self._write_varint(len(str24)) + str24
        else:
            resstr = \
                b'\x10\x00\x1a\x2a\x31\x2d\x39\x32\x39\x61\x30\x64\x63\x61\x30\x65\x65\x65\x35\x35\x35\x31\x33\x32' \
                b'\x38\x30\x31\x37\x31\x61\x38\x35\x38\x35\x64\x61\x37\x64\x63\x64\x33\x37\x30\x30\x66\x38\x22\xe3' \
                b'\x01\x0a\xbf\x01\x0a\x45\x67\x65\x6e\x65\x72\x69\x63\x5f\x78\x38\x36\x2f\x67\x6f\x6f\x67\x6c\x65' \
                b'\x5f\x73\x64\x6b\x5f\x78\x38\x36\x2f\x67\x65\x6e\x65\x72\x69\x63\x5f\x78\x38\x36\x3a\x34\x2e\x34' \
                b'\x2e\x32\x2f\x4b\x4b\x2f\x33\x30\x37\x39\x31\x38\x33\x3a\x65\x6e\x67\x2f\x74\x65\x73\x74\x2d\x6b' \
                b'\x65\x79\x73\x12\x06\x72\x61\x6e\x63\x68\x75\x1a\x0b\x67\x65\x6e\x65\x72\x69\x63\x5f\x78\x38\x36' \
                b'\x2a\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x32\x0e\x61\x6e\x64\x72\x6f\x69\x64\x2d\x67\x6f\x6f\x67\x6c' \
                b'\x65\x40\x85\xb5\x86\x06\x4a\x0b\x67\x65\x6e\x65\x72\x69\x63\x5f\x78\x38\x36\x50\x13\x5a\x19\x41' \
                b'\x6e\x64\x72\x6f\x69\x64\x20\x53\x44\x4b\x20\x62\x75\x69\x6c\x74\x20\x66\x6f\x72\x20\x78\x38\x36' \
                b'\x62\x07\x75\x6e\x6b\x6e\x6f\x77\x6e\x6a\x0e\x67\x6f\x6f\x67\x6c\x65\x5f\x73\x64\x6b\x5f\x78\x38' \
                b'\x36\x70\x00\x10\x00\x32\x06\x33\x31\x30\x32\x36\x30\x3a\x06\x33\x31\x30\x32\x36\x30\x42\x0b\x6d' \
                b'\x6f\x62\x69\x6c\x65\x3a\x4c\x54\x45\x3a\x48\x00\x32\x05\x65\x6e\x5f\x55\x53\x38\xf0\xb4\xdf\xa6' \
                b'\xb9\x9a\xb8\x83\x8e\x01\x52\x0f\x33\x35\x38\x32\x34\x30\x30\x35\x31\x31\x31\x31\x31\x31\x30\x5a' \
                b'\x00\x62\x10\x41\x6d\x65\x72\x69\x63\x61\x2f\x4e\x65\x77\x5f\x59\x6f\x72\x6b\x70\x03\x7a\x1c\x37' \
                b'\x31\x51\x36\x52\x6e\x32\x44\x44\x5a\x6c\x31\x7a\x50\x44\x56\x61\x61\x65\x45\x48\x49\x74\x64\x2b' \
                b'\x59\x67\x3d\xa0\x01\x00\xb0\x01\x00'
        return resstr

    def get_mtalk_request(self, auth_data):
        id_bytes = auth_data['id'].encode('ascii')
        token_bytes = auth_data['token'].encode('ascii')
        id_len = self._write_varint(len(id_bytes))
        token_len = self._write_varint(len(token_bytes))
        hex_id = b'android-' + binascii.hexlify(auth_data['id_str'])
        hex_id_len = self._write_varint(len(hex_id))
        msg = b"\x0a\x0a\x61\x6e\x64\x72\x6f\x69\x64\x2d\x31\x39\x12\x0f\x6d\x63\x73\x2e\x61\x6e\x64\x72\x6f\x69\x64" \
              b"\x2e\x63\x6f\x6d\x1a" + id_len + id_bytes + b"\x22" + id_len + id_bytes + b"\x2a" + \
              token_len + token_bytes + b"\x32" + hex_id_len + hex_id + \
              b"\x42\x0b\x0a\x06\x6e\x65\x77\x5f\x76\x63\x12\x01\x31\x60\x00\x70\x01\x80\x01\x02\x88\x01\x01"
        length = self._write_varint(len(msg))
        return b'\x29\x02' + length + msg

    def decode_resp_message(self, msg, need_id_str):
        return self._find_vals(msg, need_id_str)

    def _read_varint(self, data):
        i = 0
        num = 0
        length = len(data)
        while True:
            if i == length:
                raise ProtobufException(ProtobufException.NOT_FOUND)
            if sys.version_info.major == 2:
                tmp_byte = struct.unpack('B', data[i])[0]
            else:
                tmp_byte = data[i]
            if tmp_byte & 0x80 != 0:
                num = num | ((tmp_byte ^ 0x80) << 7 * i)
                i += 1
            else:
                num = num | (tmp_byte << 7 * i)
                break

        del data[:i + 1]
        return num

    def _read64(self, data):
        if len(data) < 8:
            raise ProtobufException(ProtobufException.NOT_FOUND)
        res = str(struct.unpack('<Q', bytearray(data[:8]))[0])
        del data[:8]
        return res

    def _read_field_wtype(self, data):
        num = self._read_varint(data)
        return {'wtype': num & 0x7, 'field_num': num >> 3}

    def _find_vals(self, fdata_bytes, need_id_str):
        ID_NUM = 7
        TOKEN_NUM = 8
        id_found = False
        token_found = False
        fdata = list(fdata_bytes)
        while True:
            if len(fdata) == 0:
                raise ProtobufException(ProtobufException.NOT_FOUND)
            fwt = self._read_field_wtype(fdata)
            if fwt['wtype'] == 0:
                self._read_varint(fdata)
            elif fwt['wtype'] == 1:
                if fwt['field_num'] == ID_NUM:
                    id_found = True
                    if need_id_str:
                        id_str = bytes(fdata[:8])
                    gms_id = self._read64(fdata)
                elif fwt['field_num'] == TOKEN_NUM:
                    token_found = True
                    token = self._read64(fdata)
                else:
                    del fdata[:8]

                if token_found and id_found:
                    res = {'id': gms_id, 'token': token}
                    if need_id_str:
                        res['id_str'] = id_str
                    return res
            elif fwt['wtype'] == 2:
                length = self._read_varint(fdata)
                del fdata[:length]
            else:
                raise ProtobufException(ProtobufException.SYMBOL, fwt['wtype'])
